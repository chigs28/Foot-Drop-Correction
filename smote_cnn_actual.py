# -*- coding: utf-8 -*-
"""SMOTE_CNN_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14DHc4ZgY3gAQBpqCkvEO6_llQGyYWjU_
"""
from sklearn.model_selection import train_test_split
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from pandas import DataFrame
import glob
import os
# plt.rcParams.update({'figure.max_open_warning': 0})


path = "C:/Users\BM605/Downloads/FES_ACTUAL_PATIENT"
  
# csv files in the path
files = glob.glob(path + "/*.csv")

# defining an empty list to store content

# data_frame = pd.DataFrame()
df_master = []
  
# checking all the csv files in the specified path

for filename in files:
    
# reading content of csv file
    # content.append(filename)
    content = pd.read_csv(filename, index_col=None)
    df_master.append(content)
  
# converting content to data frame

# data_frame = pd.concat(content)
# print(data_frame)
print(df_master)

# data = data_frame




def plot_df(df, no_of_points, fsr_on):
  df1 = df[:no_of_points];
  plt.figure(figsize=(22,10))
  plt.subplot(3,1,1);
  plt.xlabel('Time',fontsize= 12)
  plt.ylabel('IMU value',fontsize=12)
  plt.plot(df1['x'], label ='X', linewidth=2)
  plt.plot(df1['y'], label ='Y', linewidth=2)
  plt.plot(df1['z'], label ='Z', linewidth=2)
  plt.legend()

  plt.subplot(3,1,2);
  plt.plot(df1['gx'], label ='Gx', linewidth=2)
  plt.plot(df1['gy'], label ='Gy', linewidth=2)
  plt.plot(df1['gz'], label ='Gz', linewidth=2)
  plt.legend()
  if(fsr_on ==1):
    plt.subplot(3,1,3);
    plt.xlabel('Time',fontsize=12)
    plt.ylabel('FSR value',fontsize=12)
    plt.plot(df1['fsr'], label ='FSR', linewidth=3)
    plt.legend()


data_frame_list_x = [];
data_frame_list_y = [];
for df in df_master:
  # plot_df(df, 1000, 1)
  df = df.drop(df.columns[[0]], axis=1);
  df['fsr'] = 1*(df['fsr']>512)
  # print(df['fsr'])
  df['fsr'][1:] = np.diff(df['fsr']);
  df['fsr'] = 1*(df['fsr']>0)
  np.concatenate((np.array([0, 0, 0, 0, 0]), np.array(df['fsr'])))
  fsr_conv_temp = np.convolve(np.concatenate(([0, 0, 0, 0, 0], df['fsr'])), [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], mode='same');
  df['fsr'] = fsr_conv_temp[5:]
  # plot_df(df, 1000, 1)

  for i in np.arange(100,len(df)):
    data_frame_list_x.append(df[i-100:i].drop(df.columns[[0]], axis = 1));
    data_frame_list_y.append(df['fsr'][i]);


np.sum(data_frame_list_y)

# df_list_x0 = []
# df_list_x1 = []
# count =0;
# for i in range(len(data_frame_list_y)):
#     if(data_frame_list_y[i] == 0):
#         df_list_x0.append(data_frame_list_x[i].to_numpy());
#     if(data_frame_list_y[i] == 1):
#         df_list_x1.append(data_frame_list_x[i].to_numpy());
# print(len(df_list_x1));
# print(len(df_list_x0))

df_list_x0 = []
df_list_x1 = []
count =0;
for i in range(len(data_frame_list_y)):
    if(data_frame_list_y[i] == 0):
        df_list_x0.append(data_frame_list_x[i].to_numpy().flatten());
    if(data_frame_list_y[i] == 1):
        df_list_x1.append(data_frame_list_x[i].to_numpy().flatten());
print(len(df_list_x1));
print(len(df_list_x0))

"""# Balancing the data with SMOTE"""

df_list_y0 = np.zeros((len(df_list_x0), 1))
df_list_y1 = np.ones((len(df_list_x1), 1))

print(len(df_list_x0))
print(df_list_x0[0].shape)
print(len(df_list_y0))
print(df_list_y0[0].shape)

print(len(df_list_x1))
print(df_list_x1[0].shape)
print(len(df_list_y1))
print(df_list_y1[0].shape)

x_data0 = np.array(df_list_x0);
print(x_data0.shape)
x_data1 = np.array(df_list_x1)
print(x_data1.shape)
y_data0 = np.concatenate((df_list_y0));
print(y_data0.shape)
y_data1 = np.concatenate((df_list_y1));
print(y_data1.shape)

X_data = np.array(df_list_x0+ df_list_x1);
print(X_data.shape)
Y_data = np.concatenate((df_list_y0, df_list_y1));
print(Y_data.shape)

# from sklearn.model_selection import train_test_split
# X1_train,X1_test, y1_train,y1_test = \
# train_test_split(X_Train,Y_Train,test_size=0.2,random_state=10)

import imblearn

from imblearn.over_sampling import SMOTE
smote = SMOTE()

X_data_smote, y_data_smote = smote.fit_resample(X_data,Y_data)

print(X_data_smote.shape)
print(y_data_smote.shape)

X_data_smote_reshape = np.reshape(X_data_smote, (len(X_data_smote),100,6,1))
X_data_smote_reshape.shape

X_data_smote_reshape[0]

"""## CNN Model with SMOTE"""

X_train_s, X_test_s, y_train_s, y_test_s = train_test_split(X_data_smote_reshape, y_data_smote, test_size=0.20, random_state=101,shuffle=True)

from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Flatten, Dense, Dropout, BatchNormalization
from tensorflow.keras.layers import Conv2D, MaxPool2D
from tensorflow.keras.optimizers import Adam
print(tf.__version__)

model = Sequential()
model.add(Conv2D(8, (2, 2), activation = 'relu', input_shape = X_train_s[0].shape))
model.add(Dropout(0.1))
model.add(Conv2D(16, (2, 2), activation='relu'))
model.add(Dropout(0.2))
model.add(Flatten())

output=model.add(Dense(32, activation = 'relu'))
drop=model.add(Dropout(0.5))

model.add(Dense(1, activation = 'sigmoid'))

# compile the keras model
from tensorflow.keras.optimizers import SGD, RMSprop, Adam, Adadelta, Adagrad, Adamax, Nadam

# my_model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy','mse','mae'])
model.compile(loss='binary_crossentropy', optimizer=Adam(learning_rate=0.001), metrics=['accuracy','mse','mae'])

X_test_s

# fit the keras model on the dataset
my_history=model.fit(X_train_s, y_train_s,  validation_data=(X_test_s, y_test_s), epochs=50
                     
                     
                     
                     
                     , batch_size=64, verbose=1)

# plot loss
plt.subplot(211)
plt.title('Loss Plot ')
plt.plot(my_history.history['loss'], label='train')
plt.plot(my_history.history['val_loss'], label='val')
plt.legend()
plt.show()

# mse plot
plt.subplot(212)
plt.title('Mse Plot')
plt.plot(my_history.history['mse'], label='train')
plt.plot(my_history.history['val_mse'], label='test')
plt.legend()
plt.show()



# plot validation accuracy
fig = plt.figure()
plt.subplot(2,1,1)
plt.plot(my_history.history['accuracy'])
plt.plot(my_history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='lower right')


"""# Prediction on Test Data"""

y_pred_4= model.predict(X_test_s)
#########direct evaluaion
score4 = model.evaluate(X_test_s, y_test_s, verbose=1)
print(score4[1])
y_test_s

"""# Confusion Matrix & Accuracy (threshold =0.5)"""

y_prediction = y_pred_4
y_prediction

## evaluate using sklearn
y_pred_4[y_pred_4 >=0.5] = 1
y_pred_4[y_pred_4 < 0.5] = 0
print(y_pred_4)

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score

print(confusion_matrix(y_test_s, y_pred_4))
print(accuracy_score(y_test_s, y_pred_4))

import seaborn as sns
sns.heatmap(confusion_matrix(y_test_s, y_pred_4), cmap='Blues',annot=True, fmt="d", xticklabels=[0,1], yticklabels=[0,1])
plt.xlabel("test", fontsize=15)
plt.ylabel("predicted", fontsize=15)
plt.figure(figsize=(20, 20), dpi = 600)
plt.show()



"""

# ROC/AUC CURVE WITH MULTIPLE THRESHOLD:
"""

from matplotlib import pyplot
yhat = model.predict_on_batch(X_test_s)
# retrieve just the probabilities for the positive class
yhat.shape

from sklearn.metrics import roc_curve

pos_probs = yhat[:, 0]
# plot no skill roc curve
pyplot.plot([0, 1], [0, 1], linestyle='--', label='Random Classifier')
# calculate roc curve for model
fpr, tpr, thresholds = roc_curve(y_test_s, pos_probs)
# plot model roc curve
pyplot.plot(fpr, tpr, marker='.', label='Artificial Neural Network')


# axis labels
pyplot.xlabel('False Positive Rate')
pyplot.ylabel('True Positive Rate')
# show the legend
pyplot.legend()
# show the plot

# plt.figure(figsize=(20,10))
pyplot.show()

from sklearn.metrics import roc_auc_score
roc_auc = roc_auc_score(y_test_s, yhat)
print('ANN ROC AUC %.3f' % roc_auc)



"""# Feature Importance"""


from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
import copy


X_data_smote_avg = copy.deepcopy(X_data_smote_reshape)

no__rows = 100

len(X_data_smote_reshape)

X_data_smote_reshape[0]

X_data_smote_reshape[0][0][0]

def nullSingleActivityByZero(refFrame, featureToBeDisabledArg):
  refAvgFrame = copy.deepcopy(refFrame)

  for i in range(0, len(refFrame)):  
    val1 = 0
    for k in range(0, no__rows):
      refAvgFrame[i][k][featureToBeDisabledArg] = val1
    
  
  return refAvgFrame

# def nullSingleActivityByZero(refFrame, featureToBeDisabledArg):
#   refAvgFrame = copy.deepcopy(refFrame)

#   for i in range(0, len(refFrame)):  
#     val1 = 0
#     for k in range(0, noOfFrameSize):
#       refAvgFrame[i][k][4*featureToBeDisabledArg + 0] = val1

    
    
#     val2 = 0
#     for k in range(0, noOfFrameSize):
#       refAvgFrame[i][k][4*featureToBeDisabledArg + 1] = val2



#     val3 = 0
#     for k in range(0, noOfFrameSize):
#       refAvgFrame[i][k][4*featureToBeDisabledArg + 2] = val3
        
    
    
#     val4 = 0  
#     for k in range(0, noOfFrameSize):
#       refAvgFrame[i][k][4*featureToBeDisabledArg+ 3] = val4
    
  
#   return refAvgFrame

frame = nullSingleActivityByZero(X_data_smote_avg, 1)

frame[0]

totalFrameArray = []

for i in range(0, 6):
  totalFrameArray.append(nullSingleActivityByZero(X_data_smote_avg, i))

accuracy_scores = []

for i in range(0, len(totalFrameArray)):
#for i in range(0, 1):

  X_train, X_test, y_train, y_test = train_test_split(totalFrameArray[i], y_data_smote, test_size=0.20, random_state=101,shuffle=True)



  model = Sequential()
  model.add(Conv2D(8, (2, 2), activation = 'relu', input_shape = X_train[0].shape))
  model.add(Dropout(0.1))
  model.add(Conv2D(16, (2, 2), activation='relu'))
  model.add(Dropout(0.2))
  model.add(Flatten())

  output=model.add(Dense(32, activation = 'relu'))
  drop=model.add(Dropout(0.5))

  model.add(Dense(1, activation = 'sigmoid'))


  # my_model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy','mse','mae'])
  model.compile(loss='binary_crossentropy', optimizer=Adam(learning_rate=0.001), metrics=['accuracy','mse','mae'])
  my_history=model.fit(X_train, y_train,  validation_data=(X_test, y_test), epochs=50, batch_size=64, verbose=1)
  # history = model.fit(X_train, y_train, epochs = 100, validation_split=0.2, verbose=1)

  y_pred = model.predict(X_test)
  print(y_test)
  print(y_test.shape)
  print(np.around(y_pred))
  print(np.around(y_pred).shape)
 
  accuracy_scores.append(accuracy_score(y_test, np.around(y_pred)))

accuracy_scores = [(round(item, 3)) for item in accuracy_scores]
print(accuracy_scores)  #
d=dict()
for x in range(0,6):
    d[x+1]=accuracy_scores[x]
print(d, " ")  
  
# creating the dataset


features = ["acc_x", "acc_y", "acc_z", "gyr_x", "gyr_y", "gyr_z"]
acc_values = list(d.values())
  
fig = plt.figure(figsize = (10, 5))
 
# creating the bar plot
plt.barh(features, acc_values)
 
plt.xlabel("Accuracy Scores Obtained")
plt.ylabel("Features Disabled")
plt.title("Feature Importance Score") 
 
for index, value in enumerate(acc_values):
    plt.text(value, index,
             str(value))
 
plt.show()

"""# K Fold Cross Validation"""

import keras
import scikeras

from scikeras.wrappers import KerasClassifier, KerasRegressor
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from keras.models import Sequential
from keras.layers import Dense
from keras.models import Model
from keras.layers import Input

def built_classifier():

  model = Sequential()
  model.add(Conv2D(8, (2, 2), activation = 'relu', input_shape = X_train_s[0].shape))
  model.add(Dropout(0.1))
  model.add(Conv2D(16, (2, 2), activation='relu'))
  model.add(Dropout(0.2))
  model.add(Flatten())

  output=model.add(Dense(32, activation = 'relu'))
  drop=model.add(Dropout(0.5))
  
  model.add(Dense(1, activation = 'sigmoid'))
  model.compile(loss='binary_crossentropy', optimizer=Adam(learning_rate=0.001), metrics=['accuracy','mse','mae'])
  return model

my_model_s = KerasClassifier(build_fn = built_classifier, batch_size =100, epochs =50)
accuracies = cross_val_score(estimator= my_model_s, X=X_train_s, y = y_train_s, cv =5, n_jobs=-1 )

accuracies

accuracies.max()

# from scikeras.wrappers import KerasClassifier, KerasRegressor
# from sklearn.model_selection import KFold
# from sklearn.model_selection import cross_val_score
# from keras.models import Sequential
# from keras.layers import Dense
# from keras.models import Model
# from keras.layers import Input


# def built_classifier():

#   my_model = Sequential()
#   my_model.add(Input(shape=(600,)))
#   my_model.add(Dense(12, activation='relu',name='d1'))
#   my_model.add(Dense(8, activation='relu',name='d2'))
#   my_model.add(Dense(4, activation='relu',name='d3'))
#   # my_model.add(Dense(3, activation='softmax',name='out'))##if 3-class classification
#   my_model.add(Dense(1, activation='sigmoid',name='out')) ##if 2-class classification
#   my_model.compile(loss='binary_crossentropy', optimizer=Adam(learning_rate=0.001), metrics=['accuracy', 'mse'])
#   return my_model

# my_model = KerasClassifier(build_fn = built_classifier, batch_size =100, epochs =10)
# accuracies = cross_val_score(estimator= my_model, X=X_train, y = y_train, cv =10, n_jobs=-1 )

# from sklearn.metrics import roc_curve, auc

# fpr, tpr, threshold = roc_curve(y_test_s, y_pred_4)
# auc_model = auc(fpr, tpr)

# # svm_fpr, svm_tpr, threshold = roc_curve(y_test, y_pred_svm)
# # auc_svm = auc(svm_fpr, svm_tpr)

# plt.figure(figsize=(5, 5), dpi=100)
# # plt.plot(svm_fpr, svm_tpr, linestyle='-', label='SVM (auc = %0.3f)' % auc_svm)
# plt.plot(fpr, tpr, marker='.', label='ANN_Model (auc = %0.3f)' % auc_model)

# plt.xlabel('False Positive Rate -->')
# plt.ylabel('True Positive Rate -->')

# plt.legend()

# plt.show()

